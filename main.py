import copy
import json
import random
from flask import Flask, request, render_template
from threading import Thread
import sqlite3


sessionStorage = {}
app = Flask('')
with open('Data.json', encoding='utf8') as f:
    ant = json.loads(f.read())['antonimy']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç
with open('Data.json', encoding='utf8') as f:
    par = json.loads(f.read())['paron']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç
with open('Data.json', encoding='utf8') as f:
    sin = json.loads(f.read())['sinonimy']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç

@app.route('/post', methods=['POST'])
def main():
    response = {
        'session': request.json['session'],
        'version': request.json['version'],
        'response': {
            'end_session': False
        },
    }
    if 'screen' in request.json['meta']['interfaces']:
        handle_dialog(request.json, response)
    else:
        station_dialog(request.json, response)
    return json.dumps(response)


def modes_list(phrase):
    return {
        "type": "ItemsList",
        "header": {
            "text": f"{phrase}"
        },
        "items": [
            {
                "title": "–ê–Ω—Ç–æ–Ω–∏–º—ã",
                "description": "–ê–ª–∏—Å–∞ —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏—Ç —Å–ª–æ–≤–æ, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–Ω—Ç–æ–Ω–∏–º –∫ –Ω–µ–º—É!",
                "button": {
                    "text": "–ê–Ω—Ç–æ–Ω–∏–º—ã"
                }
            },
            {
                "title": "–°–∏–Ω–æ–Ω–∏–º—ã",
                "description": "–ü–æ–¥–±–µ—Ä–∏ –∫ —Å–ª–æ–≤—É –ê–ª–∏—Å—ã –≤–µ—Ä–Ω—ã–π —Å–∏–Ω–æ–Ω–∏–º—ã!",
                "button": {
                    "text": "–°–∏–Ω–æ–Ω–∏–º—ã"
                }
            },
            {
                "title": "–ü–∞—Ä–æ–Ω–∏–º—ã",
                "description": "–ü–æ–¥–±–µ—Ä–∏ –∫ —Å–ª–æ–≤—É –ê–ª–∏—Å—ã –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–Ω–∏–º!",
                "button": {
                    "text": "–ü–∞—Ä–æ–Ω–∏–º—ã"
                }
            },
            {
                "title": "–†–µ–π—Ç–∏–Ω–≥",
                "description": "–£–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –º–µ—Å—Ç–µ –≤ –Ω–∞—à–µ–º —Ç–æ–ø–µ!",
                "button": {
                    "text": "–†–µ–π—Ç–∏–Ω–≥"
                }
            },
        ]
    }

def write_in_state(user_id):
    return {
        'nick': sessionStorage[user_id]['nick'],
        'par': sessionStorage[user_id]['par'],
        'sin': sessionStorage[user_id]['sin'],
        'ant': sessionStorage[user_id]['ant']
    }
def write_in_base(user_id):
    con = sqlite3.connect("users.db")
    cur = con.cursor()
    par_count =  sessionStorage[user_id]['par']
    sin_count = sessionStorage[user_id]['sin']
    ant_count = sessionStorage[user_id]['ant']
    summa = par_count + sin_count + ant_count
    id_ = len(cur.execute('SELECT * FROM u').fetchall())
    cur.execute(f"SELECT * FROM u WHERE nick = '{sessionStorage[user_id]['nick']}';")
    if cur.fetchone() is None:

        cur.execute(
            f"INSERT INTO u VALUES ({id_},'{sessionStorage[user_id]['nick']}',{par_count},{ant_count},{sin_count},{summa});")
    else:
        cur.execute(
            f"UPDATE u SET (paronims, antonims, sinonims, summa) = ({par_count},{ant_count},{sin_count},{summa}) WHERE nick = '{sessionStorage[user_id]['nick']}';")
    con.commit()
    con.close()


def handle_dialog(req, res):
    user_id = req['session']['user_id']
    if res['response']['end_session'] is True:
        write_in_base(user_id)
    if req['session']['new']:
        sessionStorage[user_id] = {
            'suggests': [
                "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéØ",
                "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üéÆ",
                "–ü–æ–ª–µ–∑–Ω–æ–µ ‚úÖ"
            ],
            'slicedsuggests': [
                "–ú–µ–Ω—é",
                "–ù–µ –∑–Ω–∞—é ü§∑‚Äç"
            ],
            'test_buttons': [
                "–ê–Ω—Ç–æ–Ω–∏–º—ã",
                "–°–∏–Ω–æ–Ω–∏–º—ã",
                "–ü–∞—Ä–æ–Ω–∏–º—ã",
                "–ú–µ–Ω—é"
            ],
            "nick": None,
            'mode': '',
            'ant': 0,
            'sin': 0,
            'par': 0,
            'last': False
        }
        try:
            sessionStorage[user_id]['ant'] = req['state']['user']['ant']
            sessionStorage[user_id]['sin'] = req['state']['user']['sin']
            sessionStorage[user_id]['par'] = req['state']['user']['par']
            sessionStorage[user_id]['nick'] = req['state']['user']['nick']

            res['response']['text'] = f'–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {sessionStorage[user_id]["nick"]}! ' \
                f'–¢–≤–æ–∏ –æ—á–∫–∏: –∞–Ω—Ç–æ–Ω–∏–º—ã: {sessionStorage[user_id]["ant"]}, —Å–∏–Ω–æ–Ω–∏–º—ã: {sessionStorage[user_id]["sin"]} ' \
                f'–ø–∞—Ä–æ–Ω–∏–º—ã: {sessionStorage[user_id]["par"]}'
            res['response']['card'] = modes_list(f"–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!")
        except Exception:
            res['response']['text'] = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–µ—Å–Ω—É—é –∏–≥—Ä—É –ü–ê–°. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–∑–æ–≤–∏ —Å–≤–æ–µ –∏–º—è.'
            if 'test_count' in res['user_state_update']:
                res['user_state_update'] = {"nick": None,
          "test_count": None,
          "pic_count": None,
          "ter_count": None,
          "cul_count": None}
        return
    print('–ù–£ –≠–¢–û –ö–õ–ò–ù–ò–ö–ê –†–ï–ë–Ø–¢', sessionStorage[user_id]['nick'])
    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        sessionStorage[user_id]['nick'] = req['request']['original_utterance'] + "#" + tag
        res['response']['card'] = modes_list(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n')
        res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n. ' \
            f'–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ —Å–∫–∞–∂–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏—Ö.'
        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        return
    if '–º–µ–Ω—é' in req['request']['original_utterance'].lower():
        res["response"]["card"] = modes_list("–ú–µ–Ω—é")
        res["response"]["text"] = "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!"
        sessionStorage[user_id]['mode'] = ''
        return

    if '–∞–Ω—Ç–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∞–Ω—Ç–æ–Ω–∏–º'
        antonym = copy.deepcopy(ant)
        random.shuffle(antonym)
        sessionStorage[user_id]['data'] = antonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if '–ø–∞—Ä–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–ø–∞—Ä–æ–Ω–∏–º'
        paronym = copy.deepcopy(par)
        random.shuffle(par)
        sessionStorage[user_id]['data'] = paronym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if '—Å–∏–Ω–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Å–∏–Ω–æ–Ω–∏–º'
        sinonym = copy.deepcopy(sin)
        random.shuffle(sin)
        sessionStorage[user_id]['data'] = sinonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä'
        sessionStorage[user_id]['names'] = []
        antonym = copy.deepcopy(ant)
        paronym = copy.deepcopy(par)
        sinonym = copy.deepcopy(sin)
        data = antonym + paronym + sinonym
        random.shuffle(data)
        sessionStorage[user_id]['data'] = data[:20]
        res['response']['text'] = '–ù–∞–∑–æ–≤–∏ –∏–º–µ–Ω–∞ —Ç–µ—Ö, –∫—Ç–æ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω—è –∏ –ü–µ—Ç—è'
        return

    if sessionStorage[user_id]['mode'] in ['–∞–Ω—Ç–æ–Ω–∏–º', '–ø–∞—Ä–æ–Ω–∏–º', '—Å–∏–Ω–æ–Ω–∏–º']:
        word = sessionStorage[user_id]['data'][sessionStorage[user_id]['id']]['question']
        if not sessionStorage[user_id]['last']:
            res['response']['text'] = f'–ü–æ–¥–±–µ—Ä–∏ {sessionStorage[user_id]["mode"]} –∫ —Å–ª–æ–≤—É {word}!'
            sessionStorage[user_id]['last'] = True
        else:
            answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['id']-1]['answer']
            if answer == req['request']['original_utterance'].lower():
                res['response']['text'] = "–í–µ—Ä–Ω–æ!"
                if sessionStorage[user_id]['mode'] == '–∞–Ω—Ç–æ–Ω–∏–º':
                    sessionStorage[user_id]['ant'] += 1
                elif sessionStorage[user_id]['mode'] == '—Å–∏–Ω–æ–Ω–∏–º':
                    sessionStorage[user_id]['sin'] += 1
                elif sessionStorage[user_id]['mode'] == '–ø–∞—Ä–æ–Ω–∏–º':
                    sessionStorage[user_id]['par'] += 1
                res['user_state_update'] = write_in_state(user_id)
                write_in_base(user_id)
            else:
                res['response']['text'] = f"–¢—ã –æ—à–∏–±—Å—è, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}"

            res['response']['text'] += f' –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –ø–æ–¥–±–µ—Ä–∏ {sessionStorage[user_id]["mode"]} –∫ —Å–ª–æ–≤—É {word}!'
            if sessionStorage[user_id]['id'] == len(sessionStorage[user_id]['data']):
                write_in_base(user_id)
                random.shuffle(sessionStorage[user_id]['data'])
                sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['id'] += 1
        res['response']['buttons'] = [
            {'title': suggest, 'hide': True}
            for suggest in sessionStorage[user_id]['slicedsuggests']
        ]
    elif sessionStorage[user_id]['mode'] == '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä':
        if not sessionStorage[user_id]['names']:
            sessionStorage[user_id]['names'] = req['request']['original_utterance'].split() # –Ω—É–∂–Ω–∞ def —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ç–µ–Ω—Ç–æ–≤
            print(sessionStorage[user_id]['names'])
            res['response']['text'] = '–Ø –∑–∞–¥–∞–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥–æ–º—É. –ü–æ–µ—Ö–∞–ª–∏'
            sessionStorage[user_id]['isPlaying'] = sessionStorage[user_id]['names'][0]
            sessionStorage[user_id]['multCount'] = {
                sessionStorage[user_id]['names'][0]: 0,
                sessionStorage[user_id]['names'][1]: 0
            }
            sessionStorage[user_id]['multID'] = 0
        else:
            if sessionStorage[user_id]['multID'] == 0:
                res['response']['text'] = f"–ò–≥—Ä–∞–µ—Ç {sessionStorage[user_id]['isPlaying']}! " \
                    f"{sessionStorage[user_id]['data'][sessionStorage[user_id]['multID']]['question']}."
            else:
                if sessionStorage[user_id]['multID'] == 4: # 10 + 10 + 1
                    # –ü–†–û–í–ï–†–ö–ê
                    answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['multID'] - 1]['answer']
                    if answer == req['request']['original_utterance'].lower():
                        toGiveCount = sessionStorage[user_id]['names'][0] \
                            if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else \
                        sessionStorage[user_id]['names'][1]
                        sessionStorage[user_id]['multCount'][toGiveCount] += 1
                        res['response']['text'] = '–í–µ—Ä–Ω–æ! '
                    else:
                        res['response']['text'] = f"–û—à–∏–±–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}! "
                    # –ü–†–û–í–ï–†–ö–ê
                    name1 = sessionStorage[user_id]['names'][0]
                    name2 = sessionStorage[user_id]['names'][1]
                    if sessionStorage[user_id]['multCount'][name1] == sessionStorage[user_id]['multCount'][name2]:
                        res['response']['text'] += f"–í —ç—Ç–æ–π –±–∏—Ç–≤–µ –ø–æ–±–µ–¥–∏–ª–∞ –Ω–∏—á—å—è! " \
                            f"–û–±–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞–±—Ä–∞–ª–∏ –ø–æ {sessionStorage[user_id]['multCount'][name1]} –±–∞–ª–ª–æ–≤." # pymorphy2!
                    elif sessionStorage[user_id]['multCount'][name1] > sessionStorage[user_id]['multCount'][name2]:
                        res['response']['text'] += f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {name1} —Å–æ —Å—á–µ—Ç–æ–º " \
                            f"{sessionStorage[user_id]['multCount'][name1]}:{sessionStorage[user_id]['multCount'][name2]}"
                    else:
                        res['response']['text'] += f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {name2} —Å–æ —Å—á–µ—Ç–æ–º " \
                            f"{sessionStorage[user_id]['multCount'][name2]}:{sessionStorage[user_id]['multCount'][name2]}"
                    return
                else:
                    answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['multID'] - 1]['answer']
                    if answer == req['request']['original_utterance'].lower():
                        toGiveCount = sessionStorage[user_id]['names'][0] \
                    if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else sessionStorage[user_id]['names'][1]
                        sessionStorage[user_id]['multCount'][toGiveCount] += 1
                        res['response']['text'] = '–í–µ—Ä–Ω–æ! '
                    else:
                        res['response']['text'] = f"–û—à–∏–±–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}! "
                    res['response']['text'] += f"–ò–≥—Ä–∞–µ—Ç {sessionStorage[user_id]['isPlaying']}! " \
                        f"{sessionStorage[user_id]['data'][sessionStorage[user_id]['multID']]['question']}."
            sessionStorage[user_id]['isPlaying'] = sessionStorage[user_id]['names'][0] \
                    if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else sessionStorage[user_id]['names'][1]
            sessionStorage[user_id]['multID'] += 1
        print(sessionStorage[user_id]['multCount'])


    else:
        res["response"]["card"] = modes_list("–ú–µ–Ω—é")
        res["response"]["tts"] = "–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!"
    return


def station_dialog(req, res):
    user_id = req['session']['user_id']
    if res['response']['end_session'] is True:
        write_in_base(user_id)
    if req['session']['new']:
        sessionStorage[user_id] = {
            "nick": None,
            'mode': '',
            'ant': 0,
            'sin': 0,
            'par': 0,
            'last': False
        }
        try:
            sessionStorage[user_id]['nick'] = req['state']['user']['nick']
            sessionStorage[user_id]['ant'] = req['state']['user']['ant']
            sessionStorage[user_id]['sin'] = req['state']['user']['sin']
            sessionStorage[user_id]['par'] = req['state']['user']['par']

            res['response']['text'] = f'–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {sessionStorage[user_id]["nick"]}! ' \
                f'–¢–≤–æ–∏ –æ—á–∫–∏: –∞–Ω—Ç–æ–Ω–∏–º—ã: {sessionStorage[user_id]["ant"]}, —Å–∏–Ω–æ–Ω–∏–º—ã: {sessionStorage[user_id]["sin"]} ' \
                f'–ø–∞—Ä–æ–Ω–∏–º—ã: {sessionStorage[user_id]["par"]}'
        except Exception:
            res['response']['text'] = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–µ—Å–Ω—É—é –∏–≥—Ä—É –ü–ê–°. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–∑–æ–≤–∏ —Å–≤–æ–µ –∏–º—è.'
        return
            
    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        sessionStorage[user_id]['nick'] = req['request']['original_utterance'] + "#" + tag
        res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n' \
                                  '–£ –º–µ–Ω—è –µ—Å—Ç—å 3 —Ä–µ–∂–∏–º–∞: –ø–∞—Ä–æ–Ω–∏–º—ã, —Å–∏–Ω–æ–Ω–∏–º—ã, –∞–Ω—Ç–æ–Ω–∏–º—ã.'
        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        return
    if '–ø–∞—Ä–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–ø–∞—Ä–æ–Ω–∏–º'
        paron = copy.deepcopy(par)
        random.shuffle(paron)
        sessionStorage[user_id]['data'] = paron
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False
    if '–∞–Ω—Ç–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∞–Ω—Ç–æ–Ω–∏–º'
        antonym = copy.deepcopy(ant)
        random.shuffle(antonym)
        sessionStorage[user_id]['data'] = antonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False
    if '—Å–∏–Ω–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Å–∏–Ω–æ–Ω–∏–º'
        sinonym = copy.deepcopy(sin)
        random.shuffle(sinonym)
        sessionStorage[user_id]['data'] = sinonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if sessionStorage[user_id]['mode'] in ['–∞–Ω—Ç–æ–Ω–∏–º', '–ø–∞—Ä–æ–Ω–∏–º', '—Å–∏–Ω–æ–Ω–∏–º']:
        word = sessionStorage[user_id]['data'][sessionStorage[user_id]['id']]['question']
        if not sessionStorage[user_id]['last']:
            res['response']['text'] = f'–ü–æ–¥–±–µ—Ä–∏ {sessionStorage[user_id]["mode"]} –∫ —Å–ª–æ–≤—É {word}!'
            sessionStorage[user_id]['last'] = True
        else:
            answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['id']-1]['answer']
            if answer == req['request']['original_utterance'].lower():
                res['response']['text'] = "–í–µ—Ä–Ω–æ!"
                if sessionStorage[user_id]['mode'] == '–∞–Ω—Ç–æ–Ω–∏–º':
                    sessionStorage[user_id]['ant'] += 1
                elif sessionStorage[user_id]['mode'] == '—Å–∏–Ω–æ–Ω–∏–º':
                    sessionStorage[user_id]['sin'] += 1
                elif sessionStorage[user_id]['mode'] == '–ø–∞—Ä–æ–Ω–∏–º':
                    sessionStorage[user_id]['par'] += 1
                res['user_state_update'] = write_in_state(user_id)
            else:
                res['response']['text'] = f"–¢—ã –æ—à–∏–±—Å—è, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}"

            res['response']['text'] += f' –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –ø–æ–¥–±–µ—Ä–∏ {sessionStorage[user_id]["mode"]} –∫ —Å–ª–æ–≤—É {word}!'
            if sessionStorage[user_id]['id'] == len(sessionStorage[user_id]['data']):
                random.shuffle(sessionStorage[user_id]['data'])
                sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['id'] += 1
    else:
        res['response']['text'] = '–ü—Ä–æ—Å—Ç–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º: –ø–∞—Ä–æ–Ω–∏–º—ã, –∞–Ω—Ç–æ–Ω–∏–º—ã –∏–ª–∏ —Å–∏–Ω–æ–Ω–∏–º—ã.'
    return
    


def run():
    app.run(host="0.0.0.0", port=8080)


def keep_alive():
    server = Thread(target=run)
    server.start()


if __name__ == '__main__':
    from flask_ngrok import run_with_ngrok
    run_with_ngrok(app)
    app.run()
    #keep_alive()
    # app.run()
import copy
import json
import random
from flask import Flask, request, render_template
from threading import Thread


sessionStorage = {}
app = Flask('')
with open('Data.json', encoding='utf8') as f:
    ant = json.loads(f.read())['antonimy']  # –∞–Ω—Ç–æ–Ω–∏–º—ã
with open('Data.json', encoding='utf8') as f:
    paron = json.loads(f.read())['paron']  # –ø–∞—Ä–æ–Ω–∏–º—ã

@app.route('/post', methods=['POST'])
def main():
    response = {
        'session': request.json['session'],
        'version': request.json['version'],
        'response': {
            'end_session': False
        },
    }
    if 'screen' in request.json['meta']['interfaces']:
        handle_dialog(request.json, response)
    else:
        station_dialog(request.json, response)
    return json.dumps(response)


def modes_list(phrase):
    return {
        "type": "ItemsList",
        "header": {
            "text": f"{phrase}"
        },
        "items": [
            {
                "title": "–ê–Ω—Ç–æ–Ω–∏–º—ã",
                "description": "–ê–ª–∏—Å–∞ —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏—Ç —Å–ª–æ–≤–æ, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–Ω—Ç–æ–Ω–∏–º –∫ –Ω–µ–º—É!",
                "button": {
                    "text": "–ê–Ω—Ç–æ–Ω–∏–º—ã"
                }
            },
            {
                "title": "–°–∏–Ω–æ–Ω–∏–º—ã",
                "description": "–ü–æ–¥–±–µ—Ä–∏ –∫ —Å–ª–æ–≤—É –ê–ª–∏—Å—ã –≤–µ—Ä–Ω—ã–π —Å–∏–Ω–æ–Ω–∏–º—ã!",
                "button": {
                    "text": "–°–∏–Ω–æ–Ω–∏–º—ã"
                }
            },
            {
                "title": "–ü–∞—Ä–æ–Ω–∏–º—ã",
                "description": "–ü–æ–¥–±–µ—Ä–∏ –∫ —Å–ª–æ–≤—É –ê–ª–∏—Å—ã –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–Ω–∏–º!",
                "button": {
                    "text": "–ü–∞—Ä–æ–Ω–∏–º—ã"
                }
            },
            {
                "title": "–†–µ–π—Ç–∏–Ω–≥",
                "description": "–£–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –º–µ—Å—Ç–µ –≤ –Ω–∞—à–µ–º —Ç–æ–ø–µ!",
                "button": {
                    "text": "–†–µ–π—Ç–∏–Ω–≥"
                }
            },
        ]
    }

def handle_dialog(req, res):
    user_id = req['session']['user_id']
    if req['session']['new']:
        sessionStorage[user_id] = {
            'suggests': [
                "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéØ",
                "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üéÆ",
                "–ü–æ–ª–µ–∑–Ω–æ–µ ‚úÖ"
            ],
            'slicedsuggests': [
                "–ú–µ–Ω—é",
                "–ù–µ –∑–Ω–∞—é ü§∑‚Äç"
            ],
            'test_buttons': [
                "–ê–Ω—Ç–æ–Ω–∏–º—ã",
                "–°–∏–Ω–æ–Ω–∏–º—ã",
                "–ü–∞—Ä–æ–Ω–∏–º—ã",
                "–ú–µ–Ω—é"
            ],
            "nick": None,
            'mode': '',
            'ant': 0,
            'sin': 0,
            'par': 0,
            'last': False
        }
        try:
            sessionStorage[user_id]['nick'] = req['state']['user']['nick']
            res['response']['text'] = f'–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {sessionStorage[user_id]["nick"]}!'
            res['response']['card'] = modes_list(f"–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {sessionStorage[user_id]['nick']}!")
        except Exception:
            res['response']['text'] = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–µ—Å–Ω—É—é –∏–≥—Ä—É –ü–ê–°. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–∑–æ–≤–∏ —Å–≤–æ–µ –∏–º—è.'
    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        sessionStorage[user_id]['nick'] = req['request']['original_utterance'] + "#" + tag
        res['response']['card'] = modes_list(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n')
        res['response']['tts'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n. ' \
            f'–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ —Å–∫–∞–∂–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏—Ö.'

        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        return

    if '–∞–Ω—Ç–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∞–Ω—Ç–æ–Ω–∏–º'
        antonym = copy.deepcopy(ant)
        random.shuffle(antonym)
        sessionStorage[user_id]['data'] = antonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if '–ø–∞—Ä–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–ø–∞—Ä–æ–Ω–∏–º'
        paronym = copy.deepcopy(paron)
        random.shuffle(paron)
        sessionStorage[user_id]['data'] = paronym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if sessionStorage[user_id]['mode'] == '–∞–Ω—Ç–æ–Ω–∏–º':
        word = sessionStorage[user_id]['data'][sessionStorage[user_id]['id']]['question']
        if not sessionStorage[user_id]['last']:
            res['response']['text'] = f'–ü–æ–¥–±–µ—Ä–∏ {sessionStorage[user_id]["mode"]} –∫ —Å–ª–æ–≤—É {word}!'
            sessionStorage[user_id]['last'] = True
        else:
            answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['id']-1]['answer']
            if answer == req['request']['original_utterance'].lower():
                res['response']['text'] = "–í–µ—Ä–Ω–æ!"
            else:
                res['response']['text'] = f"–¢—ã –æ—à–∏–±—Å—è, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}"

            res['response']['text'] += f' –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –ø–æ–¥–±–µ—Ä–∏ {sessionStorage[user_id]["mode"]} –∫ —Å–ª–æ–≤—É {word}!'
            if sessionStorage[user_id]['id'] == len(sessionStorage[user_id]['data']):
                random.shuffle(sessionStorage[user_id]['data'])
                sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['id'] += 1
        res['response']['buttons'] = [
            {'title': suggest, 'hide': True}
            for suggest in sessionStorage[user_id]['slicedsuggests']
        ]

    return



def station_dialog(req, res):
    pass


def run():
    app.run(host="0.0.0.0", port=8080)


def keep_alive():
    server = Thread(target=run)
    server.start()


if __name__ == '__main__':
    from flask_ngrok import run_with_ngrok
    run_with_ngrok(app)
    app.run()
    #keep_alive()
    # app.run()
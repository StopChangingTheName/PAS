import copy
import json
import random
from flask import Flask, request, render_template
from threading import Thread
import psycopg2

sessionStorage = {}
app = Flask('')
with open('Data.json', encoding='utf8') as f:
    ant = json.loads(f.read())['antonimy']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç
with open('Data.json', encoding='utf8') as f:
    par = json.loads(f.read())['paron']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç
with open('Data.json', encoding='utf8') as f:
    sin = json.loads(f.read())['sinonimy']  # –º–∞—Å—Å–∏–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π –¥–∞—Ç


@app.route('/post', methods=['POST'])
def main():
    response = {
        'session': request.json['session'],
        'version': request.json['version'],
        'response': {
            'end_session': False
        },
    }
    if 'interfaces' in request.json['meta'] and 'screen' in request.json['meta']['interfaces']:
        handle_dialog(request.json, response)
    else:
        station_dialog(request.json, response)
    return json.dumps(response)


@app.route('/records')
def records():
    con = psycopg2.connect(user="indmfojfvoiiem",
                           password="facdfb9fe6e90a07401ae02ef4e2297fa93c2bf6d205648e5d7e062c0c8da8bb",
                           host="ec2-54-247-78-30.eu-west-1.compute.amazonaws.com",
                           port="5432",
                           database="dd2pdbo5s56kui")
    cur = con.cursor()
    cur.execute("SELECT * FROM u;")
    persons = cur.fetchall()
    con.commit()
    con.close()
    persons = sorted(persons, key=lambda x: -x[-1])
    return render_template('records.html', title='–†–µ–∫–æ—Ä–¥—ã', persons=persons)


def modes_list(phrase):
    return {
        "type": "ItemsList",
        "header": {
            "text": f"{phrase}"
        },
        "items": [
            {
                "image_id": "213044/bc53ae782060c5179879",
                "title": "–ò–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ",
                "description": "–í–Ω—É—Ç—Ä–∏ —Ç—Ä–∏ —Ä–µ–∂–∏–º–∞ ‚Äî –ø–∞—Ä–æ–Ω–∏–º—ã, –∞–Ω—Ç–æ–Ω–∏–º—ã, —Å–∏–Ω–æ–Ω–∏–º—ã. "
                               "–û—Ç–≤–µ—á–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–π —Ä–µ–π—Ç–∏–Ω–≥!",
                "button": {
                    "text": "–ò–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ"
                }
            },
            {
                "image_id": "997614/6856a265b94342ede936",
                "title": "–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä",
                "description": "–ù–µ—á–µ–º –∑–∞–Ω—è—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º? –°—ã–≥—Ä–∞–π —Å –Ω–∏–º –≤ –Ω–∞—à –Ω–∞–≤—ã–∫! –°—á–µ—Ç –¥–æ 10 –æ—á–∫–æ–≤.",
                "button": {
                    "text": "–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä"
                }
            },
            {
                "image_id": "213044/a9ac7490bbe960be59fa",
                "title": "–¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è",
                "description": "–í—Å–ø–æ–º–Ω–∏–º, —á—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Ä–æ–Ω–∏–º—ã, —Å–∏–Ω–æ–Ω–∏–º—ã, –∞–Ω—Ç–æ–Ω–∏–º—ã. –° –ø—Ä–∏–º–µ—Ä–∞–º–∏!",
                "button": {
                    "text": "–¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è"
                }
            },
            {
                "image_id": "213044/d5e7802572e77acbf28e",
                "title": "–†–µ–π—Ç–∏–Ω–≥",
                "description": "–£–∑–Ω–∞–π, –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –º–µ—Å—Ç–µ –≤ –Ω–∞—à–µ–º —Ç–æ–ø–µ!",
                "button": {
                    "url": "https://PAS--t1logy.repl.co/records"
                }
            }
        ]
    }


def for_one_player():
    return {
        "type": "ItemsList",
        "header": {
            "text": f"–ò–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ"
        },
        "items": [
            {
                "image_id": "1533899/0de49a4c564831a332eb",
                "title": "–ü–∞—Ä–æ–Ω–∏–º—ã",
                "description": "–ü–æ–¥–±–µ—Ä–∏ –∫ —Å–ª–æ–≤—É –ê–ª–∏—Å—ã –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–Ω–∏–º!",
                "button": {
                    "text": "–ü–∞—Ä–æ–Ω–∏–º—ã"
                }
            },
            {
                "image_id": "1030494/3f3a4f2e06cee0e8a04c",
                "title": "–ê–Ω—Ç–æ–Ω–∏–º—ã",
                "description": "–ê–ª–∏—Å–∞ —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏—Ç —Å–ª–æ–≤–æ, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–Ω—Ç–æ–Ω–∏–º –∫ –Ω–µ–º—É!",
                "button": {
                    "text": "–ê–Ω—Ç–æ–Ω–∏–º—ã"
                }
            },
            {
                "image_id": "1533899/9abcc0382d7feea2d610",
                "title": "–°–∏–Ω–æ–Ω–∏–º—ã",
                "description": "–ü–æ–¥–±–µ—Ä–∏ –∫ —Å–ª–æ–≤—É –ê–ª–∏—Å—ã –≤–µ—Ä–Ω—ã–π —Å–∏–Ω–æ–Ω–∏–º—ã!",
                "button": {
                    "text": "–°–∏–Ω–æ–Ω–∏–º—ã"
                }
            }
        ]
    }


def write_in_state(user_id):
    return {
        'nick': sessionStorage[user_id]['nick'],
        'par': sessionStorage[user_id]['par'],
        'sin': sessionStorage[user_id]['sin'],
        'ant': sessionStorage[user_id]['ant']
    }


def write_in_base(user_id):
    con = psycopg2.connect(user="indmfojfvoiiem",
                           password="facdfb9fe6e90a07401ae02ef4e2297fa93c2bf6d205648e5d7e062c0c8da8bb",
                           host="ec2-54-247-78-30.eu-west-1.compute.amazonaws.com",
                           port="5432",
                           database="dd2pdbo5s56kui")
    cur = con.cursor()
    par_count = sessionStorage[user_id]['par']
    sin_count = sessionStorage[user_id]['sin']
    ant_count = sessionStorage[user_id]['ant']
    summa = par_count + sin_count + ant_count
    cur.execute(f"SELECT * FROM u WHERE nick = '{sessionStorage[user_id]['nick']}';")
    if cur.fetchone() is None:

        cur.execute(
            f"INSERT INTO u VALUES (DEFAULT,'{sessionStorage[user_id][
                'nick']}',{par_count},{ant_count},{sin_count},{summa});")
    else:
        cur.execute(
            f"UPDATE u SET (paronims, antonims, sinonims, summa) = ({par_count},{ant_count},{sin_count},{summa}) WHERE nick = '{
            sessionStorage[user_id]['nick']}';")
    con.commit()
    con.close()


def handle_dialog(req, res):
    user_id = req['session']['user_id']
    if res['response']['end_session'] is True:
        write_in_base(user_id)
    if req['session']['new']:
        sessionStorage[user_id] = {
            'suggests': [
                "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ üéØ",
                "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üéÆ",
                "–ü–æ–ª–µ–∑–Ω–æ–µ ‚úÖ"
            ],
            'slicedsuggests': [
                "–ú–µ–Ω—é",
                "–ù–µ –∑–Ω–∞—é ü§∑‚Äç"
            ],
            'test_buttons': [
                "–ê–Ω—Ç–æ–Ω–∏–º—ã",
                "–°–∏–Ω–æ–Ω–∏–º—ã",
                "–ü–∞—Ä–æ–Ω–∏–º—ã",
                "–ú–µ–Ω—é"
            ],
            "nick": None,
            'mode': '',
            'ant': 0,
            'sin': 0,
            'par': 0,
            'last': False
        }
        try:
            sessionStorage[user_id]['ant'] = req['state']['user']['ant']
            sessionStorage[user_id]['sin'] = req['state']['user']['sin']
            sessionStorage[user_id]['par'] = req['state']['user']['par']
            sessionStorage[user_id]['nick'] = req['state']['user']['nick']

            res['response']['text'] = f'–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {sessionStorage[user_id]["nick"]}! ' \
                f'–¢–≤–æ–∏ –æ—á–∫–∏: –∞–Ω—Ç–æ–Ω–∏–º—ã: {sessionStorage[user_id]["ant"]}, —Å–∏–Ω–æ–Ω–∏–º—ã: {sessionStorage[user_id]["sin"]} ' \
                f'–ø–∞—Ä–æ–Ω–∏–º—ã: {sessionStorage[user_id]["par"]}'
            res['response']['card'] = modes_list(f"–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!")
        except Exception:
            res['response']['text'] = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–µ—Å–Ω—É—é –∏–≥—Ä—É –ü–ê–°. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–∑–æ–≤–∏ —Å–≤–æ–µ –∏–º—è.'
        return
    print('–ù–£ –≠–¢–û –ö–õ–ò–ù–ò–ö–ê –†–ï–ë–Ø–¢', sessionStorage[user_id]['nick'])
    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        sessionStorage[user_id]['nick'] = req['request']['original_utterance'] + "#" + tag
        res['response']['card'] = modes_list(
            f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n')
        res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n. ' \
            f'–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∂–∏–º–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ —Å–∫–∞–∂–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏—Ö.'
        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        return
    if '–º–µ–Ω—é' in req['request']['original_utterance'].lower():
        res["response"]["card"] = modes_list("–ú–µ–Ω—é")
        res["response"]["text"] = "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!"
        sessionStorage[user_id]['mode'] = ''
        return
    if '–ø–æ–º–æ—â—å' in req['request']['original_utterance'].lower():
        res["response"]["card"] = modes_list("–ü–æ–º–æ—â—å")
        res["response"]["text"] = "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!"
        sessionStorage[user_id]['mode'] = ''
        return
    if '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in req['request']['original_utterance'].lower():
        res["response"]["card"] = modes_list("–ß—Ç–æ —è —É–º–µ—é:")
        res["response"]["text"] = "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!"
        sessionStorage[user_id]['mode'] = ''
        return
    if '–∏–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ' in req['request']['original_utterance'].lower():
        res["response"]["card"] = for_one_player()
        res["response"]["text"] = "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!"
        sessionStorage[user_id]['mode'] = ''
        return

    if '—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è' in req['request']['original_utterance'].lower():
        res["response"]["text"] = '–ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏.\n' \
                                  '–ü–∞—Ä–æ–Ω–∏–º—ã ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞, —Å—Ö–æ–¥–Ω—ã–µ –ø–æ –∑–≤—É—á–∞–Ω–∏—é, –Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å–∞—Ç ‚Äî –∞–¥—Ä–µ—Å–∞–Ω—Ç.\n' \
                                  '–ê–Ω—Ç–æ–Ω–∏–º—ã ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞, –∏–º–µ—é—â–∏–µ –ø—Ä—è–º–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≥–æ–Ω—å ‚Äî –≤–æ–¥–∞.\n' \
                                  '–°–∏–Ω–æ–Ω–∏–º—ã ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞, —Ä–∞–∑–Ω—ã–µ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é, –Ω–æ –∏–º–µ—é—â–∏–µ —Å—Ö–æ–∂–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Ç–µ—Ä ‚Äî –±—Ä–∏–∑.\n' \
                                  '–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –º–µ–Ω—é –∏ –≤—ã–±–∏—Ä–∞–π —Ä–µ–∂–µ–∏–º –¥–ª—è –∏–≥—Ä—ã!'
        sessionStorage[user_id]['mode'] = ''
        res['response']['buttons'] = [{'title': "–ú–µ–Ω—é", 'hide': True}]
        return

    if '–∞–Ω—Ç–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∞–Ω—Ç–æ–Ω–∏–º'
        antonym = copy.deepcopy(ant)
        random.shuffle(antonym)
        sessionStorage[user_id]['data'] = antonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if '–ø–∞—Ä–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–ø–∞—Ä–æ–Ω–∏–º'
        paronym = copy.deepcopy(par)
        random.shuffle(par)
        sessionStorage[user_id]['data'] = paronym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if '—Å–∏–Ω–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Å–∏–Ω–æ–Ω–∏–º'
        sinonym = copy.deepcopy(sin)
        random.shuffle(sin)
        sessionStorage[user_id]['data'] = sinonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False

    if '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä'
        sessionStorage[user_id]['names'] = []
        antonym = copy.deepcopy(ant)
        paronym = copy.deepcopy(par)
        sinonym = copy.deepcopy(sin)
        data = antonym + paronym + sinonym
        random.shuffle(data)
        sessionStorage[user_id]['data'] = data[:20]
        res['response']['text'] = '–ù–∞–∑–æ–≤–∏ –∏–º–µ–Ω–∞ —Ç–µ—Ö, –∫—Ç–æ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω—è –∏ –ü–µ—Ç—è'
        return

    if sessionStorage[user_id]['mode'] in ['–∞–Ω—Ç–æ–Ω–∏–º', '–ø–∞—Ä–æ–Ω–∏–º', '—Å–∏–Ω–æ–Ω–∏–º']:
        word = sessionStorage[user_id]['data'][sessionStorage[user_id]['id']]['question']
        if not sessionStorage[user_id]['last']:
            res['response']['text'] = f'{word}!'
            sessionStorage[user_id]['last'] = True
        else:
            answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['id'] - 1]['answer'].split('/')
            for ans in answer:
                if ans in req['request']['original_utterance'].lower():
                    res['response']['text'] = "–í–µ—Ä–Ω–æ!"
                    if sessionStorage[user_id]['mode'] == '–∞–Ω—Ç–æ–Ω–∏–º':
                        sessionStorage[user_id]['ant'] += 1
                    elif sessionStorage[user_id]['mode'] == '—Å–∏–Ω–æ–Ω–∏–º':
                        sessionStorage[user_id]['sin'] += 1
                    elif sessionStorage[user_id]['mode'] == '–ø–∞—Ä–æ–Ω–∏–º':
                        sessionStorage[user_id]['par'] += 1
                    res['user_state_update'] = write_in_state(user_id)
                    write_in_base(user_id)
                    break
            else:
                res['response']['text'] = f"–¢—ã –æ—à–∏–±—Å—è, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {random.choice(answer)}."

            res['response']['text'] += f' –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {word}!'
            if sessionStorage[user_id]['id'] == len(sessionStorage[user_id]['data']):
                write_in_base(user_id)
                random.shuffle(sessionStorage[user_id]['data'])
                sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['id'] += 1
        res['response']['buttons'] = [
            {'title': suggest, 'hide': True}
            for suggest in sessionStorage[user_id]['slicedsuggests']
        ]
    elif sessionStorage[user_id]['mode'] == '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä':
        if not sessionStorage[user_id]['names']:
            names = get_first_name(req)
            if len(names) <= 1:
                res['response']['text'] = '–ú–∞–ª–æ–≤–∞—Ç–æ –∏–≥—Ä–æ–∫–æ–≤. –í–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–µ! –ù–∞–∑–æ–≤–∏ –¥–≤–∞ –∏–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
                return
            elif len(names) >= 3:
                res['response']['text'] = '–ú–Ω–æ–≥–æ–≤–∞—Ç–æ –∏–≥—Ä–æ–∫–æ–≤. –í–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–µ! –ù–∞–∑–æ–≤–∏ –¥–≤–∞ –∏–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
                return
            else:
                sessionStorage[user_id]['names'] = names
                print(sessionStorage[user_id]['names'])
                res['response']['text'] = '–Ø –∑–∞–¥–∞–º –∫–∞–∂–¥–æ–º—É –ø–æ –¥–µ—Å—è—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤!\n' \
                                          '–°–∫–∞–∂–∏ "–ü–æ–µ—Ö–∞–ª–∏!" ‚Äî –∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º!\n'
                sessionStorage[user_id]['isPlaying'] = sessionStorage[user_id]['names'][0]
                sessionStorage[user_id]['multCount'] = {
                    sessionStorage[user_id]['names'][0]: 0,
                    sessionStorage[user_id]['names'][1]: 0
                }
                sessionStorage[user_id]['multID'] = 0
        else:
            if sessionStorage[user_id]['multID'] == 0:
                res['response']['text'] = f"–ò–≥—Ä–∞–µ—Ç {sessionStorage[user_id]['isPlaying']}! " \
                    f"{sessionStorage[user_id]['data'][sessionStorage[user_id]['multID']]['question']}."
            else:
                if sessionStorage[user_id]['multID'] == 20:  # 10 + 10 + 1
                    # –ü–†–û–í–ï–†–ö–ê
                    answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['multID'] - 1]['answer'].split('/')
                    for ans in answer:
                        if ans in req['request']['original_utterance'].lower():
                            toGiveCount = sessionStorage[user_id]['names'][0] \
                                if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else \
                                sessionStorage[user_id]['names'][1]
                            sessionStorage[user_id]['multCount'][toGiveCount] += 1
                            res['response']['text'] = '–í–µ—Ä–Ω–æ! '
                            break
                    else:
                        res['response']['text'] = f"–û—à–∏–±–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {random.choice(answer)}! "
                    # –ü–†–û–í–ï–†–ö–ê
                    name1 = sessionStorage[user_id]['names'][0]
                    name2 = sessionStorage[user_id]['names'][1]
                    if sessionStorage[user_id]['multCount'][name1] == sessionStorage[user_id]['multCount'][name2]:
                        res['response']['text'] += f"–ù–∏—á—å—è! " \
                            f"–û–±–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞–±—Ä–∞–ª–∏ –ø–æ {sessionStorage[user_id]['multCount'][name1]} –±–∞–ª–ª–æ–≤."  # pymorphy2!
                    elif sessionStorage[user_id]['multCount'][name1] > sessionStorage[user_id]['multCount'][name2]:
                        res['response']['text'] += f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {name1} —Å–æ —Å—á–µ—Ç–æ–º " \
                            f"{sessionStorage[user_id]['multCount'][name1]}:{sessionStorage[user_id]['multCount'][
                                name2]}"
                    else:
                        res['response']['text'] += f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {name2} —Å–æ —Å—á–µ—Ç–æ–º " \
                            f"{sessionStorage[user_id]['multCount'][name2]}:{sessionStorage[user_id]['multCount'][
                                name2]}"
                    return
                else:
                    answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['multID'] - 1]['answer'].split('/')
                    for ans in answer:
                        if ans in req['request']['original_utterance'].lower():
                            toGiveCount = sessionStorage[user_id]['names'][0] \
                                if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else \
                                sessionStorage[user_id]['names'][1]
                            sessionStorage[user_id]['multCount'][toGiveCount] += 1
                            res['response']['text'] = '–í–µ—Ä–Ω–æ! '
                            break
                    else:
                        res['response']['text'] = f"–û—à–∏–±–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {random.choice(answer)}! "
                    res['response']['text'] += f"–ò–≥—Ä–∞–µ—Ç {sessionStorage[user_id]['isPlaying']}! " \
                        f"{sessionStorage[user_id]['data'][sessionStorage[user_id]['multID']]['question']}."
            sessionStorage[user_id]['isPlaying'] = sessionStorage[user_id]['names'][0] \
                if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else \
            sessionStorage[user_id]['names'][1]
            sessionStorage[user_id]['multID'] += 1
            res['response']['buttons'] = [
                {'title': suggest, 'hide': True}
                for suggest in sessionStorage[user_id]['slicedsuggests']
            ]
    else:
        res["response"]["card"] = modes_list("–ú–µ–Ω—é")
        res["response"]["text"] = "–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!"
    return


def station_dialog(req, res):
    user_id = req['session']['user_id']
    if res['response']['end_session'] is True:
        write_in_base(user_id)
    if req['session']['new']:
        sessionStorage[user_id] = {
            "nick": None,
            'mode': '',
            'ant': 0,
            'sin': 0,
            'par': 0,
            'last': False
        }
        try:
            sessionStorage[user_id]['nick'] = req['state']['user']['nick']
            sessionStorage[user_id]['ant'] = req['state']['user']['ant']
            sessionStorage[user_id]['sin'] = req['state']['user']['sin']
            sessionStorage[user_id]['par'] = req['state']['user']['par']

            res['response']['text'] = f'–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, {sessionStorage[user_id]["nick"]}! ' \
                f'–¢–≤–æ–∏ –æ—á–∫–∏: –∞–Ω—Ç–æ–Ω–∏–º—ã: {sessionStorage[user_id]["ant"]}, —Å–∏–Ω–æ–Ω–∏–º—ã: {sessionStorage[user_id]["sin"]} ' \
                f'–ø–∞—Ä–æ–Ω–∏–º—ã: {sessionStorage[user_id][
                    "par"]}. –£ –º–µ–Ω—è –µ—Å—Ç—å 3 —Ä–µ–∂–∏–º–∞: –∏–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ, –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å ' \
                '—Å –¥—Ä—É–≥–æ–º, –∏, —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–æ–Ω–∏–º—ã, ' \
                '–ø–∞—Ä–æ–Ω–∏–º—ã –∏ —Å–∏–Ω–æ–Ω–∏–º—ã'
        except Exception:
            res['response']['text'] = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–µ—Å–Ω—É—é –∏–≥—Ä—É –ü–ê–°. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ù–∞–∑–æ–≤–∏ —Å–≤–æ–µ –∏–º—è.'
        return

    if sessionStorage[user_id]['nick'] is None:
        tag = str(random.randint(0, 10001))
        sessionStorage[user_id]['nick'] = req['request']['original_utterance'] + "#" + tag
        res['response']['text'] = f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–≤–æ–π –Ω–∏–∫ —Å —Ç—ç–≥–æ–º: {sessionStorage[user_id]["nick"]}\n' \
            '–£ –º–µ–Ω—è –µ—Å—Ç—å 3 —Ä–µ–∂–∏–º–∞: –∏–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ, –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å ' \
            '—Å –¥—Ä—É–≥–æ–º, –∏, —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–æ–Ω–∏–º—ã, ' \
            '–ø–∞—Ä–æ–Ω–∏–º—ã –∏ —Å–∏–Ω–æ–Ω–∏–º—ã'
        res['user_state_update'] = {
            'nick': sessionStorage[user_id]['nick']
        }
        return

    if '–∏–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ' in req['request']['original_utterance'].lower():
        res["response"]["text"] = "–í –∫–∞–∫–æ–π —Ä–µ–∂–∏–º —Å—ã–≥—Ä–∞–µ–º: –∞–Ω—Ç–æ–Ω–∏–º—ã, –ø–∞—Ä–æ–Ω–∏–º—ã –∏–ª–∏ —Å–∏–Ω–æ–Ω–∏–º—ã?"
        sessionStorage[user_id]['mode'] = ''
        return
    if '—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è' in req['request']['original_utterance'].lower():
        res["response"]["text"] = '–ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏.\n' \
                                  '–ü–∞—Ä–æ–Ω–∏–º—ã ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞, —Å—Ö–æ–¥–Ω—ã–µ –ø–æ –∑–≤—É—á–∞–Ω–∏—é, –Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–¥—Ä–µ—Å–∞—Ç ‚Äî –∞–¥—Ä–µ—Å–∞–Ω—Ç.\n' \
                                  '–ê–Ω—Ç–æ–Ω–∏–º—ã ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞, –∏–º–µ—é—â–∏–µ –ø—Ä—è–º–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≥–æ–Ω—å ‚Äî –≤–æ–¥–∞.\n' \
                                  '–°–∏–Ω–æ–Ω–∏–º—ã ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞, —Ä–∞–∑–Ω—ã–µ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é, –Ω–æ –∏–º–µ—é—â–∏–µ —Å—Ö–æ–∂–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Ç–µ—Ä ‚Äî –±—Ä–∏–∑.\n' \
                                  '–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –º–µ–Ω—é –∏ –≤—ã–±–∏—Ä–∞–π —Ä–µ–∂–µ–∏–º –¥–ª—è –∏–≥—Ä—ã!'
        sessionStorage[user_id]['mode'] = ''
        return
    if '–º–µ–Ω—é' in req['request']['original_utterance'].lower() or '–ø–æ–º–æ—á—å' in req['request'][
        'original_utterance'].lower() or '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in req['request']['original_utterance'].lower():
        res["response"]["text"] = '–£ –º–µ–Ω—è –µ—Å—Ç—å 3 —Ä–µ–∂–∏–º–∞: –∏–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ, –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å ' \
                                  '—Å –¥—Ä—É–≥–æ–º, –∏, —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω—Ç–æ–Ω–∏–º—ã, ' \
                                  '–ø–∞—Ä–æ–Ω–∏–º—ã –∏ —Å–∏–Ω–æ–Ω–∏–º—ã'
        sessionStorage[user_id]['mode'] = ''
        return
    if '–ø–∞—Ä–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–ø–∞—Ä–æ–Ω–∏–º'
        paron = copy.deepcopy(par)
        random.shuffle(paron)
        sessionStorage[user_id]['data'] = paron
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False
    if '–∞–Ω—Ç–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–∞–Ω—Ç–æ–Ω–∏–º'
        antonym = copy.deepcopy(ant)
        random.shuffle(antonym)
        sessionStorage[user_id]['data'] = antonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False
    if '—Å–∏–Ω–æ–Ω–∏–º—ã' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '—Å–∏–Ω–æ–Ω–∏–º'
        sinonym = copy.deepcopy(sin)
        random.shuffle(sinonym)
        sessionStorage[user_id]['data'] = sinonym
        sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['last'] = False
    if '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä' in req['request']['original_utterance'].lower():
        sessionStorage[user_id]['mode'] = '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä'
        sessionStorage[user_id]['names'] = []
        antonym = copy.deepcopy(ant)
        paronym = copy.deepcopy(par)
        sinonym = copy.deepcopy(sin)
        data = antonym + paronym + sinonym
        random.shuffle(data)
        sessionStorage[user_id]['data'] = data[:20]
        res['response']['text'] = '–ù–∞–∑–æ–≤–∏ –∏–º–µ–Ω–∞ —Ç–µ—Ö, –∫—Ç–æ –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω—è –∏ –ü–µ—Ç—è'
        return
    if sessionStorage[user_id]['mode'] in ['–∞–Ω—Ç–æ–Ω–∏–º', '–ø–∞—Ä–æ–Ω–∏–º', '—Å–∏–Ω–æ–Ω–∏–º']:
        word = sessionStorage[user_id]['data'][sessionStorage[user_id]['id']]['question']
        if not sessionStorage[user_id]['last']:
            res['response']['text'] = f'{word}!'
            sessionStorage[user_id]['last'] = True
        else:
            answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['id'] - 1]['answer'].split('/')
            for ans in answer:
                if ans in req['request']['original_utterance'].lower():
                    res['response']['text'] = "–í–µ—Ä–Ω–æ!"
                    if sessionStorage[user_id]['mode'] == '–∞–Ω—Ç–æ–Ω–∏–º':
                        sessionStorage[user_id]['ant'] += 1
                    elif sessionStorage[user_id]['mode'] == '—Å–∏–Ω–æ–Ω–∏–º':
                        sessionStorage[user_id]['sin'] += 1
                    elif sessionStorage[user_id]['mode'] == '–ø–∞—Ä–æ–Ω–∏–º':
                        sessionStorage[user_id]['par'] += 1
                    res['user_state_update'] = write_in_state(user_id)
                    write_in_base(user_id)
                    break
            else:
                res['response']['text'] = f"–¢—ã –æ—à–∏–±—Å—è, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {random.choice(answer)}."

            res['response']['text'] += f' –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {word}!'
            if sessionStorage[user_id]['id'] == len(sessionStorage[user_id]['data']):
                random.shuffle(sessionStorage[user_id]['data'])
                sessionStorage[user_id]['id'] = 0
        sessionStorage[user_id]['id'] += 1
    elif sessionStorage[user_id]['mode'] == '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä':
        if not sessionStorage[user_id]['names']:
            names = get_first_name(req)
            if len(names) <= 1:
                res['response']['text'] = '–ú–∞–ª–æ–≤–∞—Ç–æ –∏–≥—Ä–æ–∫–æ–≤. –í–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–µ! –ù–∞–∑–æ–≤–∏ –¥–≤–∞ –∏–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
                return
            elif len(names) >= 3:
                res['response']['text'] = '–ú–Ω–æ–≥–æ–≤–∞—Ç–æ –∏–≥—Ä–æ–∫–æ–≤. –í–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–µ! –ù–∞–∑–æ–≤–∏ –¥–≤–∞ –∏–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
                return
            else:
                sessionStorage[user_id]['names'] = names
                print(sessionStorage[user_id]['names'])
                res['response']['text'] = '–Ø –∑–∞–¥–∞–º –∫–∞–∂–¥–æ–º—É –ø–æ –¥–µ—Å—è—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤! –°–∫–∞–∂–∏ "–ü–æ–µ—Ö–∞–ª–∏!" ‚Äî –∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º!\n'
                sessionStorage[user_id]['isPlaying'] = sessionStorage[user_id]['names'][0]
                sessionStorage[user_id]['multCount'] = {
                    sessionStorage[user_id]['names'][0]: 0,
                    sessionStorage[user_id]['names'][1]: 0
                }
                sessionStorage[user_id]['multID'] = 0
        else:
            if sessionStorage[user_id]['multID'] == 0:
                res['response']['text'] = f"–ò–≥—Ä–∞–µ—Ç {sessionStorage[user_id]['isPlaying']}! " \
                    f"{sessionStorage[user_id]['data'][sessionStorage[user_id]['multID']]['question']}."
            else:
                if sessionStorage[user_id]['multID'] == 20:  # 10 + 10 + 1
                    # –ü–†–û–í–ï–†–ö–ê
                    answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['multID'] - 1]['answer'].split('/')
                    for ans in answer:
                        if ans in req['request']['original_utterance'].lower():
                            toGiveCount = sessionStorage[user_id]['names'][0] \
                                if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else \
                                sessionStorage[user_id]['names'][1]
                            sessionStorage[user_id]['multCount'][toGiveCount] += 1
                            res['response']['text'] = '–í–µ—Ä–Ω–æ! '
                            break
                    else:
                        res['response']['text'] = f"–û—à–∏–±–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {random.choice(answer)}! "
                    # –ü–†–û–í–ï–†–ö–ê
                    name1 = sessionStorage[user_id]['names'][0]
                    name2 = sessionStorage[user_id]['names'][1]
                    if sessionStorage[user_id]['multCount'][name1] == sessionStorage[user_id]['multCount'][name2]:
                        res['response']['text'] += f"–ù–∏—á—å—è! " \
                            f"–û–±–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞–±—Ä–∞–ª–∏ –ø–æ {sessionStorage[user_id]['multCount'][name1]} –±–∞–ª–ª–æ–≤."  # pymorphy2!
                    elif sessionStorage[user_id]['multCount'][name1] > sessionStorage[user_id]['multCount'][name2]:
                        res['response']['text'] += f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {name1} —Å–æ —Å—á–µ—Ç–æ–º " \
                            f"{sessionStorage[user_id]['multCount'][name1]}:{sessionStorage[user_id]['multCount'][
                                name2]}"
                    else:
                        res['response']['text'] += f"–ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {name2} —Å–æ —Å—á–µ—Ç–æ–º " \
                            f"{sessionStorage[user_id]['multCount'][name2]}:{sessionStorage[user_id]['multCount'][
                                name2]}"
                    return
                else:
                    answer = sessionStorage[user_id]['data'][sessionStorage[user_id]['multID'] - 1]['answer'].split('/')
                    for ans in answer:
                        if ans in req['request']['original_utterance'].lower():
                            toGiveCount = sessionStorage[user_id]['names'][0] \
                                if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else \
                                sessionStorage[user_id]['names'][1]
                            sessionStorage[user_id]['multCount'][toGiveCount] += 1
                            res['response']['text'] = '–í–µ—Ä–Ω–æ! '
                            break
                    else:
                        res['response']['text'] = f"–û—à–∏–±–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {random.choice(answer)}! "
                    res['response']['text'] += f"–ò–≥—Ä–∞–µ—Ç {sessionStorage[user_id]['isPlaying']}! " \
                        f"{sessionStorage[user_id]['data'][sessionStorage[user_id]['multID']]['question']}."
            sessionStorage[user_id]['isPlaying'] = sessionStorage[user_id]['names'][0] \
                if sessionStorage[user_id]['names'][1] == sessionStorage[user_id]['isPlaying'] else \
            sessionStorage[user_id]['names'][1]
            sessionStorage[user_id]['multID'] += 1
    else:
        res['response']['text'] = '–ü—Ä–æ—Å—Ç–∏, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º: –∏–≥—Ä—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ, –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è'
    return


def get_first_name(req) -> list:
    names = []
    for entity in req['request']['nlu']['entities']:
        if entity['type'] == 'YANDEX.FIO':
            names.append(entity['value'].get('first_name', None))
    return names


def run():
    app.run(host="0.0.0.0", port=8080)


def keep_alive():
    server = Thread(target=run)
    server.start()


if __name__ == '__main__':
    # from flask_ngrok import run_with_ngrok
    # run_with_ngrok(app)
    # app.run()
    keep_alive()
    # app.run()
